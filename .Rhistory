Sys.time()-t1
difftime(Sys.time(),t1, units="days")
1:20
pi:10
15:1
?`:`
seq(1:20)
seq(1,20)
seq(0,10, by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
seq(1,length(my_seq))
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rp(c(0,1,2),each=10)
rep(c(0,1,2),each=10)
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
# read the data file
directory <- "./data/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
library(swirl)
swirl()
12
q
quit
xit
swirl()
1
swirl()
data(cars)
help cars
?cars
head()
head(cars)
plot(cars)
?plot()
?plot
plot(x = cars$speed, y
| = cars$dist)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed,y=cars$dist, xlab="Speed")
plot(x=cars$speed,y=cars$dist, xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist, xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist, main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(formula=mpg~cyl,data=mtcars)
hist(mtcars$mpg)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
?LETTERS
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinorm()
?rbinom
rbinom(1, size =
| 100, prob = 0.7)
rbinom(1, size =100, prob = 0.7)
flips2<-rbinom(1, size =100, prob = 0.7)
flips2<-rbinom(n=100, size =1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
Sys.Dat()
Sys.Date()
mean(c(2, 4, 5))
submit()
)
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x+1},c(8, 4, 0))
evaluate(function(x){x+1},c[1]
)
evaluate(function(x){x+1},c[1])
evaluate(function(x){x+1},x[1]c[1])
info()
x<-c(8, 4, 0);evaluate(function(x){x+1},x[1])
evaluate(function(x){x[length(x)]}, dat=c(8,4,0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
telegram("chodo chodo")
submit()
mad_libs(adjective = "", place = "", noun = "")
submit()
"'I' %p% 'love' %p% 'R!'"
"I" %p% "love" %p% "R!"
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
cls_list<-as.character(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_values
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red,summary)
tapply(flags$population, flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
class(plants)
size(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>6
num_vect>=6
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "your_name_here")
c(my_char, "your")
my_name <- c(my_char, "Swirl")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
swirl()
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x (x[0])
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf=NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2) <-c("foo", "bar", "norf")
identical(vect1,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?"matrix"
?matrix
my_matrix2<-matrix(c(1:20),nrow-4,ncol=5)
my_matrix2<-matrix(c(1:20),nrow=4,ncol=5)
identical(my_matrix, my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating","test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
5==7!
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE|c(TRUE, FALSE, FALSE)
TRUE||c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which()
which(ints)
which(ints>5)
which(c(TRUE, FALSE, TRUE))
which(ints>7)
any(ints>7)
any(ints<0)
any(ints>0)
all(ints>0)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
Sys.getlocate("LC_TIME")
Sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
Sys.setlocate("en_US.UTF-8")
q
quit
exit
e
q
q
library("lubridate")
library(lubridate)
help(package = lubridate)
today()
this_day<-today()
this_day
year()
year(this_day)
month(this_day)
day(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd_hms(dt2)
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-now()
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart, hours = 17, minutes = 34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008")
mdy("June 17, 2008", tz = "Singapore")
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long<-new_interval(last_time, arrive, tzone = attr(last_time, "Singapore"))
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
setwd("C:\\repres\\RepData_PeerAssessment1")
## Introduction
## Will be requring some additional Libraries
library("plyr")
library("knitr")
library(lattice)
library("ggplot2")
##Report on a personal activity monitoring device data
##NOTE: The GitHub repository also contains the dataset for the assignment so you do not have
##to download the data separately.
##Hence Download  code for data is not required
##Create a Data "Directory if not already exists
##Data directory will be used to store Unzipped File
if(!file.exists("./data")){dir.create("./data")}
##Data is a ZIP archive
#Hence unzip the file
if(!file.exists("./activity.csv"))
{  unzip(zipfile = "activity.zip",exdir = "./data")
}
##A. Loading and preprocessing the data
##1. Load the data (i.e. read.csv())
dt <- read.csv("data/activity.csv")
##2. Process/transform the data (if necessary) into a format suitable for your analysis
##Convert  date field to date Type
dt$date <- as.Date(dt$date, format = "%Y-%m-%d")
##B. What is mean total number of steps taken per day?
##1. Calculate the total number of steps taken per day
##Aggregate and Sum
dataTotalStepsPerDay <- aggregate(steps ~ date, FUN=sum, data=dt)
##Display Result
dataTotalStepsPerDay
##2. If you do not understand the difference between a histogram and a barplot, research the difference between them.
##Here is the main difference between bar charts and histograms. With bar charts, each column represents a group
##defined by a categorical variable; and with histograms, each column represents a group defined by a quantitative
##variable. http://stattrek.com/statistics/charts/histogram.aspx?Tutorial=AP
##Make a histogram of the total number of steps taken each day
ggplot(dataTotalStepsPerDay, aes(date, steps)) + geom_bar(stat = "identity", colour = "blue", fill = "red", width = 0.6)+  labs(title = "Histogram of Total Number of Steps per Day", x = "Date", y = "Total number of steps in a day")
##plot(dataTotalStepsPerDay$date, dataTotalStepsPerDay$steps, type="h", main="Histogram of Total Number of Steps per Day",xlab="Date", ylab="Steps per Day", col="blue", lwd=7)
##hist(dataTotalStepsPerDay$date,breaks=5, main="Histogram of Total Number of Steps per Day",
col="gray" ,xlab="Total number of steps in a day")
##hist(dataTotalStepsPerDay$steps, main="Histogram of Total Number of Steps per Day",
col="gray" ,xlab="Total number of steps in a day")
##3. Calculate and report the mean and median of the total number of steps taken per day
##mean
##mn=mean(dataTotalStepsPerDay$steps)
##mn
##md=median(dataTotalStepsPerDay$steps)
##md
##
##Easiest way is to sumarry the data
summary(dataTotalStepsPerDay)
###What is the average daily activity pattern?
##1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken,
##averaged across all days (y-axis)
dataAvgNoSteps <- aggregate(steps ~ interval, FUN=mean, data=dt)
## X axis - Interval field contains 5 minutes interval data, so no special step is required
## Y Axis - steps field contains average number of steps taken
plot(x=dataAvgNoSteps$interval, y=dataAvgNoSteps$steps, type="l", main="Average number of steps taken across all days", xlab="Interval", ylab="Steps")
##2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
# Display the row  of dataAvgNoSteps which contains max of steps
## which.max - Determines the location, i.e., index of the (first)  maximum of a numeric (or logical) vector
## Filter out that row with all columns and assign to a variable
maxAvgSteps <- dataAvgNoSteps[which.max(dataAvgNoSteps$steps),]
maxAvgSteps
## Imputing missing values
## 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
length(which(is.na(dt)))
cat("Total number of missing values in the data =",length(which(is.na(dt))))
##Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated.
##For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc
## Ans - NA is replaced by average number of steps taken
##Create a new dataset that is equal to the original dataset but with the missing data filled in.
dtWithOutMsng <- dt
for (i in 1:nrow(dtWithOutMsng)) {
if (is.na(dtWithOutMsng$steps[i])) {
intrvl <- dtWithOutMsng$interval[i]
stps <- dataAvgNoSteps[dataAvgNoSteps$interval == intrvl,]
dtWithOutMsng$steps[i] <- stps$steps
}
}
msngValues <- which(is.na(dtWithOutMsng ))
# total number of missing values
length(msngValues)
## Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number
## of steps taken per day. Do these values differ from the estimates from the first
## part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
dtWithOutMsngSum <- aggregate(steps ~ date, dtWithOutMsng , sum)
##Make a histogram of the total number of steps taken each day
ggplot(dtWithOutMsngSum , aes(date, steps)) + geom_bar(stat = "identity", colour = "blue", fill = "red", width = 0.6)+  labs(title = "Histogram of Total Number of Steps per Day (without NA)", x = "Date", y = "Total number of steps in a day")
##Compare mean and median for data with NA and without NA
sprintf("Mean of steps taken per day [with NA] =%f and Mean of steps taken per day [with out NA] %f ",mean(dataTotalStepsPerDay$steps), mean(dtWithOutMsngSum$steps))
sprintf("Median of steps taken per day [with NA] =%f and Median of steps taken per day [with out NA] %f ",median(dataTotalStepsPerDay$steps), median(dtWithOutMsngSum$steps))
##Are there differences in activity patterns between weekdays and weekends?
##1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
## if date is  Saturday or sunday put the label weekend else put label weekday
dtWithOutMsng$weekdays <- as.factor(ifelse(weekdays(dtWithOutMsng$date) %in% c("Saturday","Sunday"),"weekend", "weekday"))
levels(dtWithOutMsng$weekdays)
##2. Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged
## across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like
## using simulated data.
# calculate average steps by interval across all days
aggrdtWithOutMsng <- aggregate(steps ~ interval + weekdays , dtWithOutMsng, FUN = "mean")
xyplot(aggrdtWithOutMsng$steps ~ aggrdtWithOutMsng$interval | aggrdtWithOutMsng$weekdays,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Average Number of Steps")
